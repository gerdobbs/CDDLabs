<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="Semaphore_8cpp" kind="file" language="C++">
    <compoundname>Semaphore.cpp</compoundname>
    <includes refid="Semaphore_8h" local="yes">Semaphore.h</includes>
    <incdepgraph>
      <node id="0">
        <label>Semaphore.cpp</label>
        <link refid="Semaphore_8cpp"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>condition_variable</label>
      </node>
      <node id="2">
        <label>mutex</label>
      </node>
      <node id="4">
        <label>chrono</label>
      </node>
      <node id="1">
        <label>Semaphore.h</label>
        <link refid="Semaphore_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Semaphore_8h" kindref="compound">Semaphore.h</ref>&quot;</highlight></codeline>
<codeline lineno="17" refid="classSemaphore_1a72aabebf026e3a8b1f3e4d0fa8ee1eda" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classSemaphore_1a72aabebf026e3a8b1f3e4d0fa8ee1eda" kindref="member">Semaphore::Wait</ref>()</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock&lt;<sp/>std::mutex<sp/>&gt;<sp/>lock(<ref refid="classSemaphore_1a6490f302f311da3ce373a81672673296" kindref="member">m_mutex</ref>);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSemaphore_1a2b04d3a53f1fc1a13d7ed5d19d9e2be9" kindref="member">m_condition</ref>.wait(lock,[&amp;]()-&gt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSemaphore_1a1456f105008b0c309f41211afbdd5fee" kindref="member">m_uiCount</ref>&gt;0;<sp/>});</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--<ref refid="classSemaphore_1a1456f105008b0c309f41211afbdd5fee" kindref="member">m_uiCount</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P<sp/>&gt;</highlight></codeline>
<codeline lineno="25" refid="classSemaphore_1a7f700173ae86ae623684109066e07656" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classSemaphore_1a72aabebf026e3a8b1f3e4d0fa8ee1eda" kindref="member">Semaphore::Wait</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::chrono::duration&lt;R,P&gt;&amp;<sp/>crRelTime)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock&lt;<sp/>std::mutex<sp/>&gt;<sp/>lock(<ref refid="classSemaphore_1a6490f302f311da3ce373a81672673296" kindref="member">m_mutex</ref>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classSemaphore_1a2b04d3a53f1fc1a13d7ed5d19d9e2be9" kindref="member">m_condition</ref>.wait_for(lock,crRelTime,[&amp;]()-&gt;bool{<sp/>return<sp/>m_uiCount&gt;0;<sp/>})){</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--<ref refid="classSemaphore_1a1456f105008b0c309f41211afbdd5fee" kindref="member">m_uiCount</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classSemaphore_1a86f92f738b4486439b296d8e235895f2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classSemaphore_1a86f92f738b4486439b296d8e235895f2" kindref="member">Semaphore::Signal</ref>()</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock&lt;<sp/>std::mutex<sp/>&gt;<sp/>lock(<ref refid="classSemaphore_1a6490f302f311da3ce373a81672673296" kindref="member">m_mutex</ref>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="classSemaphore_1a1456f105008b0c309f41211afbdd5fee" kindref="member">m_uiCount</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSemaphore_1a2b04d3a53f1fc1a13d7ed5d19d9e2be9" kindref="member">m_condition</ref>.notify_one();</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Semaphore.cpp"/>
  </compounddef>
</doxygen>
