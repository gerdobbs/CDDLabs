<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="signal_8cpp" kind="file" language="C++">
    <compoundname>signal.cpp</compoundname>
    <includes refid="Semaphore_8h" local="yes">Semaphore.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">thread</includes>
    <incdepgraph>
      <node id="13">
        <label>signal.cpp</label>
        <link refid="signal_8cpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>condition_variable</label>
      </node>
      <node id="18">
        <label>iostream</label>
      </node>
      <node id="15">
        <label>mutex</label>
      </node>
      <node id="17">
        <label>chrono</label>
      </node>
      <node id="19">
        <label>thread</label>
      </node>
      <node id="14">
        <label>Semaphore.h</label>
        <link refid="Semaphore_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="signal_8cpp_1a2696073bbedb6b55e6a52d2180c2a9b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void taskOne</definition>
        <argsstring>(std::shared_ptr&lt; Semaphore &gt; theSemaphore)</argsstring>
        <name>taskOne</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classSemaphore" kindref="compound">Semaphore</ref> &gt;</type>
          <declname>theSemaphore</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Ger Dobbs </para></simplesect>
<simplesect kind="date"><para>02/10/2017 </para></simplesect>
<simplesect kind="version"><para>1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="signal.cpp" line="11" column="1" bodyfile="signal.cpp" bodystart="11" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="signal_8cpp_1ae4ea9570be601d182fa473c7ca431852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void taskTwo</definition>
        <argsstring>(std::shared_ptr&lt; Semaphore &gt; theSemaphore)</argsstring>
        <name>taskTwo</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classSemaphore" kindref="compound">Semaphore</ref> &gt;</type>
          <declname>theSemaphore</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="signal.cpp" line="18" column="1" bodyfile="signal.cpp" bodystart="18" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="signal_8cpp_1a840291bc02cba5474a4cb46a9b9566fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(void)</argsstring>
        <name>main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Launch the threads </para>        </inbodydescription>
        <location file="signal.cpp" line="26" column="1" bodyfile="signal.cpp" bodystart="26" bodyend="36"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="7"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Semaphore_8h" kindref="compound">Semaphore.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="signal_8cpp_1a2696073bbedb6b55e6a52d2180c2a9b3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="signal_8cpp_1a2696073bbedb6b55e6a52d2180c2a9b3" kindref="member">taskOne</ref>(std::shared_ptr&lt;Semaphore&gt;<sp/>theSemaphore){</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;I<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;must<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;print&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;first&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>theSemaphore-&gt;Signal();</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18" refid="signal_8cpp_1ae4ea9570be601d182fa473c7ca431852" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="signal_8cpp_1ae4ea9570be601d182fa473c7ca431852" kindref="member">taskTwo</ref>(std::shared_ptr&lt;Semaphore&gt;<sp/>theSemaphore){</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>theSemaphore-&gt;Wait();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;This<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;will&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;appear<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;second&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="signal_8cpp_1a840291bc02cba5474a4cb46a9b9566fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="signal_8cpp_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member">main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>std::thread<sp/>threadOne,<sp/>threadTwo;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Semaphore&gt;<sp/>sem1(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classSemaphore" kindref="compound">Semaphore</ref>);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>threadOne=std::thread(<ref refid="signal_8cpp_1ae4ea9570be601d182fa473c7ca431852" kindref="member">taskTwo</ref>,sem1);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>threadTwo=std::thread(<ref refid="signal_8cpp_1a2696073bbedb6b55e6a52d2180c2a9b3" kindref="member">taskOne</ref>,sem1);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Launched<sp/>from<sp/>the<sp/>main\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>threadOne.join();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>threadTwo.join();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="signal.cpp"/>
  </compounddef>
</doxygen>
